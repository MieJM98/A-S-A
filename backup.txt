{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Mitady kandra Regik 5","options":{"check_for_updates":false,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_powerful_this":null,"sandbox":null,"noframes":null,"unwrap":null,"run_at":null,"tab_types":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://sproutgigs.com/jobs.php?category=10&sort=TTR&level=starter%2Cadvanced%2Cexpert"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":["githubusercontent.com"],"use_excludes":[],"use_includes":[],"use_matches":[]}},"storage":{"ts":1710087733250,"data":{}},"enabled":true,"position":1,"uuid":"ec48b2bf-9c72-42c0-8c2c-d97e1ffca0d3","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBNaXRhZHkga2FuZHJhIFJlZ2lrIDUKLy8gQG5hbWVzcGFjZSAgICB0YW1wZXJtb25rZXktZXhhbXBsZQovLyBAdmVyc2lvbiAgICAgIDIwMjQuMDUuMTIKLy8gQGRlc2NyaXB0aW9uCi8vIEBhdXRob3IgICAgICAgbWlja2FlbAovLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8vc3Byb3V0Z2lncy5jb20vam9icy5waHA/Y2F0ZWdvcnk9MTAmc29ydD1UVFImbGV2ZWw9c3RhcnRlciUyQ2FkdmFuY2VkJTJDZXhwZXJ0Ci8vIEBncmFudCAgICAgICAgR01feG1saHR0cFJlcXVlc3QKLy8gPT0vVXNlclNjcmlwdD09CgoKCgooZnVuY3Rpb24gKCkgewogICd1c2Ugc3RyaWN0JzsKCiAgdmFyIGludGVydmFsSUQ7IC8vIElkZW50aWZpYW50IGRlIGwnaW50ZXJ2YWxsZSBwb3VyIGwnZXjDqWN1dGlvbiBww6lyaW9kaXF1ZSBkZSBsYSBmb25jdGlvbiBfcHJvY2Vzc0pvYnMKCiAgLy8gTGlzdGUgZGVzIHR5cGVzIGRlIGpvYnMKICB2YXIgam9iVHlwZXMgPSBbIk1vc3QgUmVjZW50IiwgIkhpZ2hlc3QgUGF5aW5nIiwgIkNyeXB0byBWZXJpZmllZCBBY2NvdW50cyJdOwoKICAvLyBGb25jdGlvbiBwb3VyIGVmZmVjdHVlciB1bmUgcmVxdcOqdGUgSFRUUCBHRVQgZXQgZXjDqWN1dGVyIHVuZSBmb25jdGlvbiBkZSByYXBwZWwgYXZlYyBsZSBjb250ZW51IGRlIGxhIHLDqXBvbnNlCiAgZnVuY3Rpb24gZmV0Y2hKb2JEYXRhKGNhbGxiYWNrKSB7CiAgICBHTV94bWxodHRwUmVxdWVzdCh7CiAgICAgIG1ldGhvZDogIkdFVCIsCiAgICAgIHVybDogJ2h0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9NaWVKTTk4L0EtUy1BL21haW4vMTIzNC50eHQnLAogICAgICBvbmxvYWQ6IGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgIHZhciBqb2JEYXRhID0gcmVzcG9uc2UucmVzcG9uc2VUZXh0LnRyaW0oKTsKICAgICAgICBjYWxsYmFjayhqb2JEYXRhKTsKICAgICAgfQogICAgfSk7CiAgfQoKICAvLyBGb25jdGlvbiBwb3VyIHPDqWxlY3Rpb25uZXIgYWzDqWF0b2lyZW1lbnQgdW4gdHlwZSBkZSBqb2IgZXQgc2ltdWxlciB1biBjbGljIHN1ciBsJ8OpbMOpbWVudCBjb3JyZXNwb25kYW50CiAgZnVuY3Rpb24gc2VsZWN0UmFuZG9tSm9iVHlwZSgpIHsKICAgIHZhciByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGpvYlR5cGVzLmxlbmd0aCk7CiAgICB2YXIgc2VsZWN0ZWRKb2JUeXBlID0gam9iVHlwZXNbcmFuZG9tSW5kZXhdOwogICAgY2xpY2tKb2JUeXBlKHNlbGVjdGVkSm9iVHlwZSk7CiAgfQoKICAvLyBGb25jdGlvbiBwb3VyIHNpbXVsZXIgdW4gY2xpYyBzdXIgbCfDqWzDqW1lbnQgZGUgdHlwZSBkZSBqb2Igc3DDqWNpZmnDqQogIGZ1bmN0aW9uIGNsaWNrSm9iVHlwZShqb2JUeXBlKSB7CiAgICB2YXIgZHJvcGRvd25JdGVtcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImRyb3Bkb3duLWl0ZW0iKTsKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZHJvcGRvd25JdGVtcy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgaXRlbSA9IGRyb3Bkb3duSXRlbXNbaV07CiAgICAgIGlmIChpdGVtLmlubmVyVGV4dCA9PT0gam9iVHlwZSkgewogICAgICAgIGl0ZW0uY2xpY2soKTsKICAgICAgICBicmVhazsKICAgICAgfQogICAgfQogIH0KCiAgLy8gRm9uY3Rpb24gcG91ciB0cm91dmVyIGxlIHR5cGUgZGUgam9iIGxlIHBsdXMgZnLDqXF1ZW50IHBhcm1pIHVuZSBsaXN0ZSBkZSB0eXBlcyBkZSBqb2IgZXQgcmVudm95ZXIgbGUgcsOpc3VsdGF0CiAgZnVuY3Rpb24gZmluZE1vc3RGcmVxdWVudEpvYlR5cGUoam9iTGlzdCkgewogICAgdmFyIGZyZXF1ZW5jeU1hcCA9IHt9OwogICAgdmFyIG1heEZyZXF1ZW5jeSA9IDA7CiAgICB2YXIgbW9zdEZyZXF1ZW50Sm9iVHlwZSA9ICcnOwoKICAgIGpvYkxpc3QuZm9yRWFjaChmdW5jdGlvbiAoam9iKSB7CiAgICAgIGlmIChqb2IgIT09ICcnICYmIGpvYiAhPT0gIkZJUlNUIEpPQiIpIHsKICAgICAgICBmcmVxdWVuY3lNYXBbam9iXSA9IChmcmVxdWVuY3lNYXBbam9iXSB8fCAwKSArIDE7CiAgICAgICAgaWYgKGZyZXF1ZW5jeU1hcFtqb2JdID4gbWF4RnJlcXVlbmN5KSB7CiAgICAgICAgICBtYXhGcmVxdWVuY3kgPSBmcmVxdWVuY3lNYXBbam9iXTsKICAgICAgICAgIG1vc3RGcmVxdWVudEpvYlR5cGUgPSBqb2I7CiAgICAgICAgfQogICAgICB9CiAgICB9KTsKCiAgICByZXR1cm4gbW9zdEZyZXF1ZW50Sm9iVHlwZSAhPT0gJycgPyBbbW9zdEZyZXF1ZW50Sm9iVHlwZSArICIgKHgiICsgbWF4RnJlcXVlbmN5ICsgJyknXSA6IFtdOwogIH0KCiAgLy8gRm9uY3Rpb24gcG91ciB0cmFpdGVyIGxlcyBqb2JzIHVuZSBmb2lzIHF1J2lscyBzb250IHLDqWN1cMOpcsOpcwogIGZ1bmN0aW9uIHByb2Nlc3NKb2JzKGpvYkRhdGEpIHsKICAgIHZhciBzdWNjZXNzQ2VsbHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJqb2JzX19pdGVtLWNlbGwtLXN1Y2Nlc3MiKTsKICAgIHZhciBqb2JMaXN0ID0gW107CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdWNjZXNzQ2VsbHMubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIGNlbGwgPSBzdWNjZXNzQ2VsbHNbaV07CiAgICAgIHZhciBqb2IgPSBjZWxsLnRleHRDb250ZW50LnRyaW0oKTsKICAgICAgaWYgKGpvYiAhPT0gIkZJUlNUIEpPQiIpIHsKICAgICAgICBqb2JMaXN0LnB1c2goam9iKTsKICAgICAgfQogICAgfQoKICAgIGlmIChqb2JMaXN0Lmxlbmd0aCA+IDApIHsKICAgICAgdmFyIG1vc3RGcmVxdWVudEpvYiA9IGZpbmRNb3N0RnJlcXVlbnRKb2JUeXBlKGpvYkxpc3QpOwogICAgICBpZiAobW9zdEZyZXF1ZW50Sm9iLmxlbmd0aCA+IDApIHsKICAgICAgICB2YXIgZnJlcXVlbmN5ID0gcGFyc2VJbnQobW9zdEZyZXF1ZW50Sm9iWzBdLm1hdGNoKC9cKHgoXGQrKVwpLylbMV0pOwogICAgICAgIGlmIChmcmVxdWVuY3kgPiA0KSB7CiAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSUQpOwogICAgICAgICAgYWxlcnQoIlLDqXN1bHRhdCBhdmVjIGxlIHBsdXMgZ3JhbmQgbm9tYnJlIGRlIHLDqXDDqXRpdGlvbnMgc3Vww6lyaWV1ciDDoCAxMiA6ICIgKyBtb3N0RnJlcXVlbnRKb2JbMF0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzZWxlY3RSYW5kb21Kb2JUeXBlKCk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHNlbGVjdFJhbmRvbUpvYlR5cGUoKTsKICAgICAgfQogICAgfQogIH0KCiAgLy8gRMOpbWFycmFnZSBkZSBsJ2V4w6ljdXRpb24KICBmZXRjaEpvYkRhdGEoZnVuY3Rpb24gKHBhc3N3b3JkKSB7CiAgICAvLyBTdXBwcmVzc2lvbiBkZSBsYSBkZW1hbmRlIGRlIG1vdCBkZSBwYXNzZSBldCBleMOpY3V0aW9uIGRpcmVjdGUgZGUgbGEgZm9uY3Rpb24gcHJvY2Vzc0pvYnMKICAgIGludGVydmFsSUQgPSBzZXRJbnRlcnZhbChwcm9jZXNzSm9icywgNjAwMCk7CiAgfSk7Cgp9KSgpOwoKCgoKLyoKKGZ1bmN0aW9uICgpIHsKICAgICd1c2Ugc3RyaWN0JzsKCiAgICB2YXIgaW50ZXJ2YWxJRDsgLy8gSWRlbnRpZmlhbnQgZGUgbCdpbnRlcnZhbGxlIHBvdXIgbCdleMOpY3V0aW9uIHDDqXJpb2RpcXVlIGRlIGxhIGZvbmN0aW9uIF9wcm9jZXNzSm9icwoKICAgIC8vIExpc3RlIGRlcyB0eXBlcyBkZSBqb2JzCiAgICB2YXIgam9iVHlwZXMgPSBbIk1vc3QgUmVjZW50IiwgIkhpZ2hlc3QgUGF5aW5nIiwgIkNyeXB0byBWZXJpZmllZCBBY2NvdW50cyJdOwoKICAgIC8vIEZvbmN0aW9uIHBvdXIgZWZmZWN0dWVyIHVuZSByZXF1w6p0ZSBIVFRQIEdFVCBldCBleMOpY3V0ZXIgdW5lIGZvbmN0aW9uIGRlIHJhcHBlbCBhdmVjIGxlIGNvbnRlbnUgZGUgbGEgcsOpcG9uc2UKICAgIGZ1bmN0aW9uIGZldGNoSm9iRGF0YShjYWxsYmFjaykgewogICAgICAgIEdNX3htbGh0dHBSZXF1ZXN0KHsKICAgICAgICAgICAgbWV0aG9kOiAiR0VUIiwKICAgICAgICAgICAgdXJsOiAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL01pZUpNOTgvQS1TLUEvbWFpbi8xMjM0LnR4dCcsCiAgICAgICAgICAgIG9ubG9hZDogZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICB2YXIgam9iRGF0YSA9IHJlc3BvbnNlLnJlc3BvbnNlVGV4dC50cmltKCk7CiAgICAgICAgICAgICAgICBjYWxsYmFjayhqb2JEYXRhKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQoKICAgIC8vIEZvbmN0aW9uIHBvdXIgc8OpbGVjdGlvbm5lciBhbMOpYXRvaXJlbWVudCB1biB0eXBlIGRlIGpvYiBldCBzaW11bGVyIHVuIGNsaWMgc3VyIGwnw6lsw6ltZW50IGNvcnJlc3BvbmRhbnQKICAgIGZ1bmN0aW9uIHNlbGVjdFJhbmRvbUpvYlR5cGUoKSB7CiAgICAgICAgdmFyIHJhbmRvbUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogam9iVHlwZXMubGVuZ3RoKTsKICAgICAgICB2YXIgc2VsZWN0ZWRKb2JUeXBlID0gam9iVHlwZXNbcmFuZG9tSW5kZXhdOwogICAgICAgIGNsaWNrSm9iVHlwZShzZWxlY3RlZEpvYlR5cGUpOwogICAgfQoKICAgIC8vIEZvbmN0aW9uIHBvdXIgc2ltdWxlciB1biBjbGljIHN1ciBsJ8OpbMOpbWVudCBkZSB0eXBlIGRlIGpvYiBzcMOpY2lmacOpCiAgICBmdW5jdGlvbiBjbGlja0pvYlR5cGUoam9iVHlwZSkgewogICAgICAgIHZhciBkcm9wZG93bkl0ZW1zID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiZHJvcGRvd24taXRlbSIpOwogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZHJvcGRvd25JdGVtcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICB2YXIgaXRlbSA9IGRyb3Bkb3duSXRlbXNbaV07CiAgICAgICAgICAgIGlmIChpdGVtLmlubmVyVGV4dCA9PT0gam9iVHlwZSkgewogICAgICAgICAgICAgICAgaXRlbS5jbGljaygpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CgogICAgLy8gRm9uY3Rpb24gcG91ciB0cm91dmVyIGxlIHR5cGUgZGUgam9iIGxlIHBsdXMgZnLDqXF1ZW50IHBhcm1pIHVuZSBsaXN0ZSBkZSB0eXBlcyBkZSBqb2IgZXQgcmVudm95ZXIgbGUgcsOpc3VsdGF0CiAgICBmdW5jdGlvbiBmaW5kTW9zdEZyZXF1ZW50Sm9iVHlwZShqb2JMaXN0KSB7CiAgICAgICAgdmFyIGZyZXF1ZW5jeU1hcCA9IHt9OwogICAgICAgIHZhciBtYXhGcmVxdWVuY3kgPSAwOwogICAgICAgIHZhciBtb3N0RnJlcXVlbnRKb2JUeXBlID0gJyc7CgogICAgICAgIGpvYkxpc3QuZm9yRWFjaChmdW5jdGlvbiAoam9iKSB7CiAgICAgICAgICAgIGlmIChqb2IgIT09ICcnICYmIGpvYiAhPT0gIkZJUlNUIEpPQiIpIHsKICAgICAgICAgICAgICAgIGZyZXF1ZW5jeU1hcFtqb2JdID0gKGZyZXF1ZW5jeU1hcFtqb2JdIHx8IDApICsgMTsKICAgICAgICAgICAgICAgIGlmIChmcmVxdWVuY3lNYXBbam9iXSA+IG1heEZyZXF1ZW5jeSkgewogICAgICAgICAgICAgICAgICAgIG1heEZyZXF1ZW5jeSA9IGZyZXF1ZW5jeU1hcFtqb2JdOwogICAgICAgICAgICAgICAgICAgIG1vc3RGcmVxdWVudEpvYlR5cGUgPSBqb2I7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgcmV0dXJuIG1vc3RGcmVxdWVudEpvYlR5cGUgIT09ICcnID8gW21vc3RGcmVxdWVudEpvYlR5cGUgKyAiICh4IiArIG1heEZyZXF1ZW5jeSArICcpJ10gOiBbXTsKICAgIH0KCiAgICAvLyBGb25jdGlvbiBwb3VyIHRyYWl0ZXIgbGVzIGpvYnMgdW5lIGZvaXMgcXUnaWxzIHNvbnQgcsOpY3Vww6lyw6lzCiAgICBmdW5jdGlvbiBwcm9jZXNzSm9icyhqb2JEYXRhKSB7CiAgICAgICAgdmFyIHN1Y2Nlc3NDZWxscyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImpvYnNfX2l0ZW0tY2VsbC0tc3VjY2VzcyIpOwogICAgICAgIHZhciBqb2JMaXN0ID0gW107CgogICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3VjY2Vzc0NlbGxzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciBjZWxsID0gc3VjY2Vzc0NlbGxzW2ldOwogICAgICAgICAgICB2YXIgam9iID0gY2VsbC50ZXh0Q29udGVudC50cmltKCk7CiAgICAgICAgICAgIGlmIChqb2IgIT09ICJGSVJTVCBKT0IiKSB7CiAgICAgICAgICAgICAgICBqb2JMaXN0LnB1c2goam9iKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKGpvYkxpc3QubGVuZ3RoID4gMCkgewogICAgICAgICAgICB2YXIgbW9zdEZyZXF1ZW50Sm9iID0gZmluZE1vc3RGcmVxdWVudEpvYlR5cGUoam9iTGlzdCk7CiAgICAgICAgICAgIGlmIChtb3N0RnJlcXVlbnRKb2IubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgdmFyIGZyZXF1ZW5jeSA9IHBhcnNlSW50KG1vc3RGcmVxdWVudEpvYlswXS5tYXRjaCgvXCh4KFxkKylcKS8pWzFdKTsKICAgICAgICAgICAgICAgIGlmIChmcmVxdWVuY3kgPiA3KSB7CiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbElEKTsKICAgICAgICAgICAgICAgICAgICBhbGVydCgiUsOpc3VsdGF0IGF2ZWMgbGUgcGx1cyBncmFuZCBub21icmUgZGUgcsOpcMOpdGl0aW9ucyBzdXDDqXJpZXVyIMOgIDEyIDogIiArIG1vc3RGcmVxdWVudEpvYlswXSk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIHNlbGVjdFJhbmRvbUpvYlR5cGUoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHNlbGVjdFJhbmRvbUpvYlR5cGUoKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICAvLyBGb25jdGlvbiBwb3VyIGVmZmVjdHVlciB1bmUgcmVjaGVyY2hlIHBlbmRhbnQgMzAgc2Vjb25kZXMsIHB1aXMgZmFpcmUgdW5lIHBhdXNlIGRlIDEwIHNlY29uZGVzLCBldCByw6lww6l0ZXIgY2UgcHJvY2Vzc3VzCiAgICBmdW5jdGlvbiBzZWFyY2hMb29wKCkgewogICAgICAgIGludGVydmFsSUQgPSBzZXRJbnRlcnZhbChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGZldGNoSm9iRGF0YShwcm9jZXNzSm9icyk7CiAgICAgICAgfSwgMTAwMCk7IC8vIFJlY2hlcmNoZSB0b3V0ZXMgbGVzIDMwIHNlY29uZGVzCgogICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSUQpOyAvLyBBcnLDqnRlIGxhIHJlY2hlcmNoZSBhcHLDqHMgMzAgc2Vjb25kZXMKICAgICAgICAgICAgc2V0VGltZW91dChzZWFyY2hMb29wLCA1MDAwKTsgLy8gRmFpdCB1bmUgcGF1c2UgZGUgMTAgc2Vjb25kZXMsIHB1aXMgcmVsYW5jZSBsYSByZWNoZXJjaGUKICAgICAgICB9LCAxMDAwKTsgLy8gRmFpdCB1bmUgcGF1c2UgZGUgMTAgc2Vjb25kZXMgYXByw6hzIDMwIHNlY29uZGVzIGRlIHJlY2hlcmNoZQogICAgfQoKICAgIC8vIEZvbmN0aW9uIGRlIGTDqW1hcnJhZ2UgOiBkZW1hbmRlIHVuIG1vdCBkZSBwYXNzZSBldCBjb21tZW5jZSBsYSByZWNoZXJjaGUgc2kgbGUgbW90IGRlIHBhc3NlIGVzdCBjb3JyZWN0CiAgICBmZXRjaEpvYkRhdGEoZnVuY3Rpb24gKHBhc3N3b3JkKSB7CiAgICAgICAgdmFyIHVzZXJJbnB1dCA9IHByb21wdCgiRW50cmV6IGxlIG1vdCBkZSBwYXNzZSA6Iik7CiAgICAgICAgaWYgKHVzZXJJbnB1dCA9PT0gcGFzc3dvcmQpIHsKICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBzZWFyY2hMb29wKCk7IC8vIENvbW1lbmNlIGxhIGJvdWNsZSBkZSByZWNoZXJjaGUKICAgICAgICAgICAgfSwgMzAwMDApOyAvLyBBdHRlbmQgMzAgc2Vjb25kZXMgYXZhbnQgZGUgY29tbWVuY2VyIGxhIHJlY2hlcmNoZQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGFsZXJ0KCJNb3QgZGUgcGFzc2UgaW5jb3JyZWN0LiBMZSBzY3JpcHQgbmUgc2VyYSBwYXMgZXjDqWN1dMOpLiIpOwogICAgICAgIH0KICAgIH0pOwoKfSkoKTsKCiovCi8qCi8vLyoKCihmdW5jdGlvbiAoKSB7CiAgJ3VzZSBzdHJpY3QnOwoKICB2YXIgaW50ZXJ2YWxJRDsgLy8gSWRlbnRpZmlhbnQgZGUgbCdpbnRlcnZhbGxlIHBvdXIgbCdleMOpY3V0aW9uIHDDqXJpb2RpcXVlIGRlIGxhIGZvbmN0aW9uIF9wcm9jZXNzSm9icwoKICAvLyBMaXN0ZSBkZXMgdHlwZXMgZGUgam9icwogIHZhciBqb2JUeXBlcyA9IFsiTW9zdCBSZWNlbnQiLCAiSGlnaGVzdCBQYXlpbmciLCAiQ3J5cHRvIFZlcmlmaWVkIEFjY291bnRzIl07CgogIC8vIEZvbmN0aW9uIHBvdXIgZWZmZWN0dWVyIHVuZSByZXF1w6p0ZSBIVFRQIEdFVCBldCBleMOpY3V0ZXIgdW5lIGZvbmN0aW9uIGRlIHJhcHBlbCBhdmVjIGxlIGNvbnRlbnUgZGUgbGEgcsOpcG9uc2UKICBmdW5jdGlvbiBmZXRjaEpvYkRhdGEoY2FsbGJhY2spIHsKICAgIEdNX3htbGh0dHBSZXF1ZXN0KHsKICAgICAgbWV0aG9kOiAiR0VUIiwKICAgICAgdXJsOiAnaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL01pZUpNOTgvQS1TLUEvbWFpbi8xMjM0LnR4dCcsCiAgICAgIG9ubG9hZDogZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgdmFyIGpvYkRhdGEgPSByZXNwb25zZS5yZXNwb25zZVRleHQudHJpbSgpOwogICAgICAgIGNhbGxiYWNrKGpvYkRhdGEpOwogICAgICB9CiAgICB9KTsKICB9CgogIC8vIEZvbmN0aW9uIHBvdXIgc8OpbGVjdGlvbm5lciBhbMOpYXRvaXJlbWVudCB1biB0eXBlIGRlIGpvYiBldCBzaW11bGVyIHVuIGNsaWMgc3VyIGwnw6lsw6ltZW50IGNvcnJlc3BvbmRhbnQKICBmdW5jdGlvbiBzZWxlY3RSYW5kb21Kb2JUeXBlKCkgewogICAgdmFyIHJhbmRvbUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogam9iVHlwZXMubGVuZ3RoKTsKICAgIHZhciBzZWxlY3RlZEpvYlR5cGUgPSBqb2JUeXBlc1tyYW5kb21JbmRleF07CiAgICBjbGlja0pvYlR5cGUoc2VsZWN0ZWRKb2JUeXBlKTsKICB9CgogIC8vIEZvbmN0aW9uIHBvdXIgc2ltdWxlciB1biBjbGljIHN1ciBsJ8OpbMOpbWVudCBkZSB0eXBlIGRlIGpvYiBzcMOpY2lmacOpCiAgZnVuY3Rpb24gY2xpY2tKb2JUeXBlKGpvYlR5cGUpIHsKICAgIHZhciBkcm9wZG93bkl0ZW1zID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiZHJvcGRvd24taXRlbSIpOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkcm9wZG93bkl0ZW1zLmxlbmd0aDsgaSsrKSB7CiAgICAgIHZhciBpdGVtID0gZHJvcGRvd25JdGVtc1tpXTsKICAgICAgaWYgKGl0ZW0uaW5uZXJUZXh0ID09PSBqb2JUeXBlKSB7CiAgICAgICAgaXRlbS5jbGljaygpOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgfQoKICAvLyBGb25jdGlvbiBwb3VyIHRyb3V2ZXIgbGUgdHlwZSBkZSBqb2IgbGUgcGx1cyBmcsOpcXVlbnQgcGFybWkgdW5lIGxpc3RlIGRlIHR5cGVzIGRlIGpvYiBldCByZW52b3llciBsZSByw6lzdWx0YXQKICBmdW5jdGlvbiBmaW5kTW9zdEZyZXF1ZW50Sm9iVHlwZShqb2JMaXN0KSB7CiAgICB2YXIgZnJlcXVlbmN5TWFwID0ge307CiAgICB2YXIgbWF4RnJlcXVlbmN5ID0gMDsKICAgIHZhciBtb3N0RnJlcXVlbnRKb2JUeXBlID0gJyc7CgogICAgam9iTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChqb2IpIHsKICAgICAgaWYgKGpvYiAhPT0gJycgJiYgam9iICE9PSAiRklSU1QgSk9CIikgewogICAgICAgIGZyZXF1ZW5jeU1hcFtqb2JdID0gKGZyZXF1ZW5jeU1hcFtqb2JdIHx8IDApICsgMTsKICAgICAgICBpZiAoZnJlcXVlbmN5TWFwW2pvYl0gPiBtYXhGcmVxdWVuY3kpIHsKICAgICAgICAgIG1heEZyZXF1ZW5jeSA9IGZyZXF1ZW5jeU1hcFtqb2JdOwogICAgICAgICAgbW9zdEZyZXF1ZW50Sm9iVHlwZSA9IGpvYjsKICAgICAgICB9CiAgICAgIH0KICAgIH0pOwoKICAgIHJldHVybiBtb3N0RnJlcXVlbnRKb2JUeXBlICE9PSAnJyA/IFttb3N0RnJlcXVlbnRKb2JUeXBlICsgIiAoeCIgKyBtYXhGcmVxdWVuY3kgKyAnKSddIDogW107CiAgfQoKICAvLyBGb25jdGlvbiBwb3VyIHRyYWl0ZXIgbGVzIGpvYnMgdW5lIGZvaXMgcXUnaWxzIHNvbnQgcsOpY3Vww6lyw6lzCiAgZnVuY3Rpb24gcHJvY2Vzc0pvYnMoam9iRGF0YSkgewogICAgdmFyIHN1Y2Nlc3NDZWxscyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImpvYnNfX2l0ZW0tY2VsbC0tc3VjY2VzcyIpOwogICAgdmFyIGpvYkxpc3QgPSBbXTsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN1Y2Nlc3NDZWxscy5sZW5ndGg7IGkrKykgewogICAgICB2YXIgY2VsbCA9IHN1Y2Nlc3NDZWxsc1tpXTsKICAgICAgdmFyIGpvYiA9IGNlbGwudGV4dENvbnRlbnQudHJpbSgpOwogICAgICBpZiAoam9iICE9PSAiRklSU1QgSk9CIikgewogICAgICAgIGpvYkxpc3QucHVzaChqb2IpOwogICAgICB9CiAgICB9CgogICAgaWYgKGpvYkxpc3QubGVuZ3RoID4gMCkgewogICAgICB2YXIgbW9zdEZyZXF1ZW50Sm9iID0gZmluZE1vc3RGcmVxdWVudEpvYlR5cGUoam9iTGlzdCk7CiAgICAgIGlmIChtb3N0RnJlcXVlbnRKb2IubGVuZ3RoID4gMCkgewogICAgICAgIHZhciBmcmVxdWVuY3kgPSBwYXJzZUludChtb3N0RnJlcXVlbnRKb2JbMF0ubWF0Y2goL1woeChcZCspXCkvKVsxXSk7CiAgICAgICAgaWYgKGZyZXF1ZW5jeSA+IDQpIHsKICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW50ZXJ2YWxJRCk7CiAgICAgICAgICBhbGVydCgiUsOpc3VsdGF0IGF2ZWMgbGUgcGx1cyBncmFuZCBub21icmUgZGUgcsOpcMOpdGl0aW9ucyBzdXDDqXJpZXVyIMOgIDEyIDogIiArIG1vc3RGcmVxdWVudEpvYlswXSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHNlbGVjdFJhbmRvbUpvYlR5cGUoKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc2VsZWN0UmFuZG9tSm9iVHlwZSgpOwogICAgICB9CiAgICB9CiAgfQoKICAvLyBGb25jdGlvbiBkZSBkw6ltYXJyYWdlIDogZGVtYW5kZSB1biBtb3QgZGUgcGFzc2UgZXQgY29tbWVuY2Ugw6AgdHJhaXRlciBsZXMgam9icyBzaSBsZSBtb3QgZGUgcGFzc2UgZXN0IGNvcnJlY3QKICBmZXRjaEpvYkRhdGEoZnVuY3Rpb24gKHBhc3N3b3JkKSB7CiAgICB2YXIgdXNlcklucHV0ID0gcHJvbXB0KCJFbnRyZXogbGUgbW90IGRlIHBhc3NlIDoiKTsKICAgIGlmICh1c2VySW5wdXQgPT09IHBhc3N3b3JkKSB7CiAgICAgIGludGVydmFsSUQgPSBzZXRJbnRlcnZhbChwcm9jZXNzSm9icywgNjAwMCk7CiAgICB9IGVsc2UgewogICAgICBhbGVydCgiTW90IGRlIHBhc3NlIGluY29ycmVjdC4gTGUgc2NyaXB0IG5lIHNlcmEgcGFzIGV4w6ljdXTDqS4iKTsKICAgIH0KICB9KTsKCn0pKCk7CgoqLwoKCi8qCihmdW5jdGlvbihfMHg0NWZlNDEsXzB4NGY4MjllKXt2YXIgXzB4ZjY1MDAxPV8weDUxNDEsXzB4NTYyYTdmPV8weDQ1ZmU0MSgpO3doaWxlKCEhW10pe3RyeXt2YXIgXzB4MWYyODBhPS1wYXJzZUludChfMHhmNjUwMDEoMHgxZDYpKS8weDEqKHBhcnNlSW50KF8weGY2NTAwMSgweDFkYykpLzB4MikrLXBhcnNlSW50KF8weGY2NTAwMSgweDFjYSkpLzB4MytwYXJzZUludChfMHhmNjUwMDEoMHgxZDMpKS8weDQrcGFyc2VJbnQoXzB4ZjY1MDAxKDB4MWQyKSkvMHg1KihwYXJzZUludChfMHhmNjUwMDEoMHgxYzIpKS8weDYpK3BhcnNlSW50KF8weGY2NTAwMSgweDFkOSkpLzB4NystcGFyc2VJbnQoXzB4ZjY1MDAxKDB4MWMwKSkvMHg4KigtcGFyc2VJbnQoXzB4ZjY1MDAxKDB4MWNjKSkvMHg5KStwYXJzZUludChfMHhmNjUwMDEoMHgxYzQpKS8weGEqKC1wYXJzZUludChfMHhmNjUwMDEoMHgxYzcpKS8weGIpO2lmKF8weDFmMjgwYT09PV8weDRmODI5ZSlicmVhaztlbHNlIF8weDU2MmE3ZlsncHVzaCddKF8weDU2MmE3Zlsnc2hpZnQnXSgpKTt9Y2F0Y2goXzB4MjY5YzVmKXtfMHg1NjJhN2ZbJ3B1c2gnXShfMHg1NjJhN2ZbJ3NoaWZ0J10oKSk7fX19KF8weDU5MTUsMHg5N2ZlNSksKGZ1bmN0aW9uKCl7J3VzZSBzdHJpY3QnO3ZhciBfMHhjYmUxZDE9XzB4NTE0MTt2YXIgXzB4NGVhYWNmLF8weDM4ZmNiNj1bXzB4Y2JlMWQxKDB4MWNiKSxfMHhjYmUxZDEoMHgxZDcpLCdDcnlwdG9ceDIwVmVyaWZpZWRceDIwQWNjb3VudHMnXSxfMHgxMjJiYmY9J2h0dHBzOi8vcGFzdGViaW4uY29tL3Jhdy92YWhNVXRXWSc7ZnVuY3Rpb24gXzB4NTljMWRjKF8weDIzYzdmYSl7dmFyIF8weDRjN2Y1Nj1fMHhjYmUxZDE7R01feG1saHR0cFJlcXVlc3QoeydtZXRob2QnOl8weDRjN2Y1NigweDFjOSksJ3VybCc6XzB4MTIyYmJmLCdvbmxvYWQnOmZ1bmN0aW9uKF8weDU4OTU3Yyl7dmFyIF8weDExOGNkMz1fMHg0YzdmNTYsXzB4NTEyNzFiPV8weDU4OTU3Y1tfMHgxMThjZDMoMHgxZDEpXVsndHJpbSddKCk7XzB4MjNjN2ZhKF8weDUxMjcxYik7fX0pO31mdW5jdGlvbiBfMHg0MDJmNDgoKXt2YXIgXzB4NjU0ZTNhPV8weGNiZTFkMSxfMHg4NWFkYjA9TWF0aFtfMHg2NTRlM2EoMHgxZDgpXShNYXRoW18weDY1NGUzYSgweDFkNCldKCkqXzB4MzhmY2I2W18weDY1NGUzYSgweDFkNSldKSxfMHhkOTFkNjM9XzB4MzhmY2I2W18weDg1YWRiMF07XzB4NTViMjBhKF8weGQ5MWQ2Myk7fWZ1bmN0aW9uIF8weDU1YjIwYShfMHg1OGQ4ZGIpe3ZhciBfMHg0MDMzMjA9XzB4Y2JlMWQxLF8weDUxMzgwYj1kb2N1bWVudFtfMHg0MDMzMjAoMHgxY2QpXShfMHg0MDMzMjAoMHgxY2YpKTtmb3IodmFyIF8weDEwMDdmMj0weDA7XzB4MTAwN2YyPF8weDUxMzgwYltfMHg0MDMzMjAoMHgxZDUpXTtfMHgxMDA3ZjIrKyl7dmFyIF8weDVhZjMyZj1fMHg1MTM4MGJbXzB4MTAwN2YyXTtpZihfMHg1YWYzMmZbXzB4NDAzMzIwKDB4MWJmKV09PT1fMHg1OGQ4ZGIpe18weDVhZjMyZltfMHg0MDMzMjAoMHgxYzEpXSgpO2JyZWFrO319fWZ1bmN0aW9uIF8weDE0YTQwYyhfMHg0M2Y3NWYpe3ZhciBfMHgxNGVjM2E9XzB4Y2JlMWQxLF8weDNjMTZmNz17fSxfMHgxNGEzMjE9MHgwLF8weDJkNTE0Nz0nJztyZXR1cm4gXzB4NDNmNzVmW18weDE0ZWMzYSgweDFkYildKGZ1bmN0aW9uKF8weDUyNGM2YSl7dmFyIF8weDMwZjFkMT1fMHgxNGVjM2E7XzB4NTI0YzZhIT09JycmJl8weDUyNGM2YSE9PV8weDMwZjFkMSgweDFjOCkmJihfMHgzYzE2ZjdbXzB4NTI0YzZhXT0oXzB4M2MxNmY3W18weDUyNGM2YV18fDB4MCkrMHgxLF8weDNjMTZmN1tfMHg1MjRjNmFdPl8weDE0YTMyMSYmKF8weDE0YTMyMT1fMHgzYzE2ZjdbXzB4NTI0YzZhXSxfMHgyZDUxNDc9XzB4NTI0YzZhKSk7fSksXzB4MmQ1MTQ3IT09Jyc/W18weDJkNTE0NysnXHgyMCh4JytfMHgxNGEzMjErJyknXTpbXTt9ZnVuY3Rpb24gXzB4Mjk5Nzc5KCl7dmFyIF8weDg0YzE4OD1fMHhjYmUxZDEsXzB4MjFlNjIxPWRvY3VtZW50W18weDg0YzE4OCgweDFjZCldKF8weDg0YzE4OCgweDFjMykpLF8weDNjNzZkYT1bXTtmb3IodmFyIF8weDkxYTE1Nz0weDA7XzB4OTFhMTU3PF8weDIxZTYyMVtfMHg4NGMxODgoMHgxZDUpXTtfMHg5MWExNTcrKyl7dmFyIF8weDExNzljMj1fMHgyMWU2MjFbXzB4OTFhMTU3XSxfMHg1NmExZGY9XzB4MTE3OWMyW18weDg0YzE4OCgweDFjNildW18weDg0YzE4OCgweDFjZSldKCk7XzB4NTZhMWRmIT09XzB4ODRjMTg4KDB4MWM4KSYmXzB4M2M3NmRhW18weDg0YzE4OCgweDFjNSldKF8weDU2YTFkZik7fWlmKF8weDNjNzZkYVtfMHg4NGMxODgoMHgxZDUpXT4weDApe3ZhciBfMHgyMGI5MTk9XzB4MTRhNDBjKF8weDNjNzZkYSk7aWYoXzB4MjBiOTE5W18weDg0YzE4OCgweDFkNSldPjB4MCl7dmFyIF8weDI5ODUyOD1wYXJzZUludChfMHgyMGI5MTlbMHgwXVsnbWF0Y2gnXSgvXCh4KFxkKylcKS8pWzB4MV0pO18weDI5ODUyOD4weGM/KGNsZWFySW50ZXJ2YWwoXzB4NGVhYWNmKSxhbGVydCgnUsOpc3VsdGF0XHgyMGF2ZWNceDIwbGVceDIwcGx1c1x4MjBncmFuZFx4MjBub21icmVceDIwZGVceDIwcsOpcMOpdGl0aW9uc1x4MjBzdXDDqXJpZXVyXHgyMMOgXHgyMDEyXHgyMDpceDIwJytfMHgyMGI5MTlbMHgwXSkpOl8weDQwMmY0OCgpO31lbHNlIF8weDQwMmY0OCgpO319XzB4NTljMWRjKGZ1bmN0aW9uKF8weDJiYmQzYSl7dmFyIF8weDU0M2UzOD1fMHhjYmUxZDEsXzB4NTMwODg3PXByb21wdChfMHg1NDNlMzgoMHgxZDApKTtfMHg1MzA4ODc9PT1fMHgyYmJkM2E/XzB4NGVhYWNmPXNldEludGVydmFsKF8weDI5OTc3OSwweGJiOCk6YWxlcnQoXzB4NTQzZTM4KDB4MWRhKSk7fSk7fSgpKSk7ZnVuY3Rpb24gXzB4NTE0MShfMHg1ODM1YzAsXzB4NTc0OTlmKXt2YXIgXzB4NTkxNWY1PV8weDU5MTUoKTtyZXR1cm4gXzB4NTE0MT1mdW5jdGlvbihfMHg1MTQxN2IsXzB4MTk2MjJhKXtfMHg1MTQxN2I9XzB4NTE0MTdiLTB4MWJmO3ZhciBfMHg0NTIzY2Q9XzB4NTkxNWY1W18weDUxNDE3Yl07cmV0dXJuIF8weDQ1MjNjZDt9LF8weDUxNDEoXzB4NTgzNWMwLF8weDU3NDk5Zik7fWZ1bmN0aW9uIF8weDU5MTUoKXt2YXIgXzB4M2FmYWM4PVsnZ2V0RWxlbWVudHNCeUNsYXNzTmFtZScsJ3RyaW0nLCdkcm9wZG93bi1pdGVtJywnRW50cmV6XHgyMGxlXHgyMG1vdFx4MjBkZVx4MjBwYXNzZVx4MjA6JywncmVzcG9uc2VUZXh0JywnMTYwNW9ScEh0YycsJzI1Mjg1NTJMY1lLQ1AnLCdyYW5kb20nLCdsZW5ndGgnLCc1NTg4OTFpWEZnS24nLCdIaWdoZXN0XHgyMFBheWluZycsJ2Zsb29yJywnNzQwNzE5MExOdXpJZScsJ01vdFx4MjBkZVx4MjBwYXNzZVx4MjBpbmNvcnJlY3QuXHgyMExlXHgyMHNjcmlwdFx4MjBuZVx4MjBzZXJhXHgyMHBhc1x4MjBleMOpY3V0w6kuJywnZm9yRWFjaCcsJzJpZ0xpWG0nLCdpbm5lclRleHQnLCc4a0pnSW1wJywnY2xpY2snLCcxMzI5NmhGVnFpYycsJ2pvYnNfX2l0ZW0tY2VsbC0tc3VjY2VzcycsJzEzODU2Mjgwa2RQQWVDJywncHVzaCcsJ3RleHRDb250ZW50JywnMTFYRm9qRlEnLCdGSVJTVFx4MjBKT0InLCdHRVQnLCcyNDIyMzYyTEhQS0hCJywnTW9zdFx4MjBSZWNlbnQnLCc4NzU2MDQ2Z1NNTk1NJ107XzB4NTkxNT1mdW5jdGlvbigpe3JldHVybiBfMHgzYWZhYzg7fTtyZXR1cm4gXzB4NTkxNSgpO30KCiov"},{"name":"Mitady kandra Regik 2","options":{"check_for_updates":true,"comment":null,"compat_foreach":false,"compat_metadata":false,"compat_powerful_this":null,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://sproutgigs.com/jobs.php?category=10&level=starter"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"sandbox":null,"tab_types":null,"unwrap":null},"storage":{"ts":1720109992272,"data":{}},"enabled":true,"position":2,"uuid":"5c1b8083-7341-4c0f-a149-13be06225772","source":""}],"settings":{"configMode":50,"external_update_interval":1,"scriptUpdateCheckDisabled":false,"scriptUpdateCheckPeriod":21600000,"script_blacklist_server":[{"rules":["/https?:\\/\\/userscripts\\.org\\/scripts\\/(source|version)/(102614).*\\.user\\.js/"],"severity":2},{"name":"SaveFrom.net helper","reason":"Shows advertisements","rules":["/https?:\\/\\/sf-addon\\.com\\/.*\\/.*\\.user\\.js/","/https?:\\/\\/.*\\.sf-helper\\.com\\/.*\\.user\\.js/"],"severity":3},{"reasons":{"en":"Used for a phishing compain to compromise users of baon-nutrition.com"},"rules":["/https?:\\/\\/files\\.ulysse\\.travel\\/.*\\.user\\.js/"],"severity":8}],"statistics_enabled":false}}